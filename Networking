OSI
Layer          PDU
----------------------------
Application  | Data
Presentation | Data
Session      | Data
Transport    | Segment/Datagram
Network      | Packet
Data Link    | Frame
Physical     | Bit

-----------------------
MAC Address Types:

Unicast- one to one
8th bit is off

Multicast- one to many
8th bit is on

Broadcast- one to all
All 8 bits are on
------------------------
Cisco Modes:
Server
Client
Transparent - Be on the Trunking VLAN but pretend I aint here

DTP (Dynamic Trunking Protocol)
Should be disconfigured
Automatically uodates what trunks are allowed

Discovery Protocls
______
CDP (Cisco Discovery Protocol)
FDP (Foundation Discovery Protocol)
LLDP (Link Layer Discovery Protocol)

STP (Spanning Tree Protocol)
----------------------------
Tells a network the fastest way to get to the default gateway. If a device has not been used yet it will not be apart of the 'tree'. The time it takes for all device to end up on the tree is called convergence.
Root decision process
1-Elect Root Bridge
2-Identify the Root ports on non-bridge
3-Identift the Designated port for each segment
4-Set alternate ports to blocking state


Layer 2 Attack Mitigation Tehcniques
----------------------------------------
Shutdown Unused ports
Enable Port Security
Enable Port Security 
IP Source Guard
Manaully assign STOP Root
BPDU Guard


Hops away
How many hops away is a host. Find the traceroute (It is a bunch of Ping request and Time to live exceeded messages), then go to the bottom of that and the reply has a ttl. Subtract that from the OS's respective default TTL. That is how many hops away it is
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
String vs Integer

    String

        my_string = "Hello World"

    Number

        int = 1234

        float = 3.14

        hex = 0x45
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Built-In Functions

    int()

    len()

    str()

    sum()

    print()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Built-In Methods

    my_string.upper()

    my_string.lower()

    my_string.split()

    my_list.append()

    my_list.insert()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How Imports Work

    import {module}

    import {module} as {name}

    from {module} import *

    from {module} import {function}

    from {module} import {function} as {name}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Programming with Python3

    Network sockets primarily use the Python3 Socket library and socket.socket function.

import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The socket.socket Function

    Inside the socket.socket. function, you have these arguments, in order:

socket.socket( *family*, *type*, *proto* )

    family: AF_INET*, AF_INET6, AF_UNIX

    type: SOCK_STREAM*, SOCK_DGRAM, SOCK_RAW

    proto: 0*, IPPROTO_TCP, IPPROTO_UDP, IPPROTO_IP, IPPROTO_ICMP, IPPROTO_RAW
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STREAM SOCKET SENDER DEMO
#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
ip_addr = '127.0.0.1'
port = 1111
s.connect((ip_addr, port))
message = b"Message"
s.send(message)
data, conn = s.recvfrom(1024)
print(data.decode('utf-8'))
s.close()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Stream Socket Receiver Demo

#!/usr/bin/python3
import socket
import os
port = 1111
message = b"Connected to TCP Server on port %i\n" % port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', port))
s.listen(1)
os.system("clear")
print ("Waiting for TCP connections\n")
while 1:
    conn, addr = s.accept()
    connect = conn.recv(1024)
    address, port = addr
    print ("Message Received - '%s'" % connect.decode())
    print ("Sent by -", address, "port -", port, "\n")
    conn.sendall(message)
    conn.close()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Datagram Socket Sender Demo

#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
ip_addr = '127.0.0.1'
port = 2222
message = b"Message"
s.sendto(message, (ip_addr, port))
data, addr = s.recvfrom(1024)
print(data.decode())
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Datagram Socket Receiver Demo

#!/usr/bin/python3
import socket
import os
port = 2222
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,0)
s.bind(('', port))
os.system("clear")
print ("Awaiting UDP Messages")
while True:
    data, addr = s.recvfrom(1024)
    address, port = addr
    print ("\nMessage Received: '%s'" % data.decode())
    print ("Sent by -", address, "port", port)
    s.sendto(b"Message received by the UDP Message Server!", addr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Raw IPV4 Sockets

    RAW Socket scripts must include the IP header and the next headers.

    Requires guidance from the "Request for Comments" (RFC) to follow header structure properly.

        RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.

    See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Raw Socket Use Case

    Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering

    Avoiding defense mechanisms

    Obfuscating data during transfer

    Manually crafting a packet with the chosen data in header fields
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encoding and Decoding

    Encoding

        The process of taking bits and converting them using a specified cipher.

    Decoding

        Reverse of the conversion process used by the specified cipher for encoding.

    Common encoding schemes

        UTF-8, Base64, Hex
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encoding vs Encryption

    Encoding - converts data into a different format

    Encryption - scrambles data to make it unreadable without a secret key
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hex Encoding and Decoding

Encode text to Hex:

echo "Message" | xxd

Encode file to Hex:

xxd file.txt file-encoded.txt

Decode file from Hex:

xxd -r file-encoded.txt file-decoded.txt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python Hex Encoding

import binascii

message = b'Message'
hidden_msg = binascii.hexlify(message)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Base64 Encoding and Decoding

Encode text to base64:

echo "Message" | base64

Endode file to Base64:

base64 file.txt > file-encoded.txt

Decode file from Base64:

base64 -d file-encoded.txt > file-decoded.txt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python Base64 Encoding

import base64

message = b'Message'
hidden_msg = base64.b64encode(message)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
